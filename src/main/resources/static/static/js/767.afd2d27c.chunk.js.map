{"version":3,"file":"static/js/767.afd2d27c.chunk.js","mappings":"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","sources":["components/ToDoForm.js","services/api.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Alert,\r\n} from \"reactstrap\";\r\nimport { createToDo } from \"../services/api\"; // API 호출 함수 임포트\r\n\r\nconst ToDoForm = () => {\r\n  // State for form inputs\r\n  const [title, setTitle] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const toDoDTO = { title, date, time, description };\r\n\r\n    try {\r\n      // API 호출\r\n      const response = await createToDo(toDoDTO);\r\n      setSuccessMessage(`ToDo saved successfully! ID: ${response.data}`);\r\n      setErrorMessage(\"\");\r\n      // Clear form inputs\r\n      setTitle(\"\");\r\n      setDate(\"\");\r\n      setTime(\"\");\r\n      setDescription(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error saving ToDo:\", error);\r\n      setErrorMessage(\"Failed to save ToDo. Please try again.\");\r\n      setSuccessMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Card>\r\n          <CardTitle tag=\"h6\" className=\"border-bottom p-3 mb-0\">\r\n            <i className=\"bi bi-bell me-2\"> </i>\r\n            Create ToDo\r\n          </CardTitle>\r\n          <CardBody>\r\n            <Form onSubmit={handleSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"title\">Title</Label>\r\n                <Input\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  placeholder=\"제목 입력\"\r\n                  type=\"text\"\r\n                  value={title}\r\n                  onChange={(e) => setTitle(e.target.value)}\r\n                  required\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"date\">Date</Label>\r\n                <Input\r\n                  id=\"date\"\r\n                  name=\"date\"\r\n                  type=\"date\"\r\n                  value={date}\r\n                  onChange={(e) => setDate(e.target.value)}\r\n                  required\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"time\">Time</Label>\r\n                <Input\r\n                  id=\"time\"\r\n                  name=\"time\"\r\n                  type=\"time\"\r\n                  value={time}\r\n                  onChange={(e) => setTime(e.target.value)}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"description\">Description</Label>\r\n                <Input\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  placeholder=\"설명 입력\"\r\n                  type=\"textarea\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                />\r\n              </FormGroup>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Form>\r\n            {successMessage && (\r\n              <Alert color=\"success\" className=\"mt-3\">\r\n                {successMessage}\r\n              </Alert>\r\n            )}\r\n            {errorMessage && (\r\n              <Alert color=\"danger\" className=\"mt-3\">\r\n                {errorMessage}\r\n              </Alert>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ToDoForm;\r\n","import axios from 'axios';\r\n\r\nconst API_BASE_URL = \"http://localhost:8080/todo\";\r\n\r\n// 모든 ToDo 조회\r\nexport const getAllTodos = async () => {\r\n    return await axios.get(API_BASE_URL);\r\n};\r\n\r\n// 특정 ToDo 조회\r\nexport const getTodoById = async (id) => {\r\n    return await axios.get(`${API_BASE_URL}/${id}`);\r\n};\r\n\r\n// ToDo 생성\r\nexport const createToDo = async (todo) => {\r\n    return await axios.post(`${API_BASE_URL}`, todo);\r\n};\r\n\r\n// ToDo 업데이트\r\nexport const updateTodo = async (id, todo) => {\r\n    return await axios.put(`${API_BASE_URL}/${id}`, todo);\r\n};\r\n\r\n// ToDo 삭제\r\nexport const deleteTodo = async (id) => {\r\n    return await axios.delete(`${API_BASE_URL}/${id}`);\r\n};\r\n"],"names":["ToDoForm","title","setTitle","useState","date","setDate","time","setTime","description","setDescription","successMessage","setSuccessMessage","errorMessage","setErrorMessage","_jsx","Row","children","Col","_jsxs","Card","CardTitle","tag","className","CardBody","Form","onSubmit","async","e","preventDefault","toDoDTO","response","createToDo","concat","data","error","console","FormGroup","Label","for","Input","id","name","placeholder","type","value","onChange","target","required","Button","color","Alert","API_BASE_URL","getAllTodos","axios","get","getTodoById","post","todo","updateTodo","put","deleteTodo","delete"],"sourceRoot":""}